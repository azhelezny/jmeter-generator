<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
 #set( $D = '$' )
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="test suite variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="QUERY_TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">QUERY_TIMEOUT</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.desc">timeout value for all test queries</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER" elementType="Argument">
            <stringProp name="Argument.name">SERVER</stringProp>
            <stringProp name="Argument.value">${D}{__P(server)}</stringProp>
            <stringProp name="Argument.desc">hostname/IP of the database server to connect to</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOGDIR" elementType="Argument">
            <stringProp name="Argument.name">LOGDIR</stringProp>
            <stringProp name="Argument.value">../logs</stringProp>
            <stringProp name="Argument.desc">directory for Save Responses to a file Listener</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">SCHEMA</stringProp>
            <stringProp name="Argument.value">AGGREGATE_FUNCTIONS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATADIR" elementType="Argument">
            <stringProp name="Argument.name">DATADIR</stringProp>
            <stringProp name="Argument.value">/data/${D}{SCHMEA}/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BADDIR" elementType="Argument">
            <stringProp name="Argument.name">BADDIR</stringProp>
            <stringProp name="Argument.value">/BAD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="test database" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">values(1)</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">testDatabase</stringProp>
        <stringProp name="dbUrl">jdbc:splice://${D}{SERVER}:1527/splicedb</stringProp>
        <stringProp name="driver">com.splicemachine.db.jdbc.ClientDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">admin</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">splice</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setup" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="drop tables" enabled="true"/>
                <hashTree>
                #foreach( $query in $queries )
                #if ( $query.type.toString() == 'DROP')
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="$query.value" enabled="true">
                    <stringProp name="dataSource">testDatabase</stringProp>
                    <stringProp name="query">$query.value</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout">${QUERY_TIMEOUT}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as Object</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
                #end
                #end
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="create tables" enabled="true"/>
                <hashTree>
                #foreach( $query in $queries )
                #if ( $query.type.toString() == 'INSERT' || $query.type.toString() == 'CREATE')
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="$query.value" enabled="true">
                    <stringProp name="dataSource">testDatabase</stringProp>
                    <stringProp name="query">$query.value</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout">${QUERY_TIMEOUT}</stringProp>
                    <stringProp name="queryType">Update Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as Object</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                  </JDBCSampler>
                <hashTree/>
                #end
                #end
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="run_explain" enabled="true"/>
        <hashTree>
        #foreach( $query in $queries )
        #if ( $query.type.toString() != 'DROP' && $query.type.toString() != 'INSERT' && $query.type.toString() != 'CREATE' && $query.type.toString() != 'OTHER' )
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="explain $query.value" enabled="true">
            <stringProp name="dataSource">testDatabase</stringProp>
            <stringProp name="query">explain $query.value</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">${D}{QUERY_TIMEOUT}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          #end
          #end
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="run_queries" enabled="true"/>
        <hashTree>
        #foreach( $query in $queries )
        #if ( $query.type.toString() != 'DROP' && $query.type.toString() != 'INSERT' && $query.type.toString() != 'CREATE')
        #if( $query.type.toString() == 'OTHER' )
        #set( $testname = 'Required review: ' + $query.value )
        #else
        #set( $testname = $query.value )
        #end
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="$query.value" enabled="true">
            <stringProp name="dataSource">testDatabase</stringProp>
            <stringProp name="query">$query.value</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout">${D}{QUERY_TIMEOUT}</stringProp>
            <stringProp name="queryType">$query.jMeterQueryType.toString()</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="TestPlan.comments">$query.comments</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="response assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          #end
          #end
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">../logs/assertion-results.log</stringProp>
        </ResultCollector>
        <hashTree/>
        <Summariser guiclass="SummariserGui" testclass="Summariser" testname="run_queries" enabled="true"/>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
          <stringProp name="FileSaver.filename">../logs/${D}{__BeanShell(SampleResult.getSampleLabel())}.                     </stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <stringProp name="FileSaver.numberPadLen">2</stringProp>
        </ResultSaver>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="run_tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1454074593000</longProp>
        <longProp name="ThreadGroup.end_time">1454074593000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="170071582">Test Fragment</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
